<?php

/**
 * @file
 * Contains hooks for the bookmarks module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Routing\CurrentRouteMatch;

/**
 * Implements hook_help().
 */
function bookmarks_help($route_name, CurrentRouteMatch $route_match) {
  if ($route_name == 'help.page.bookmarks') {
    $text = file_get_contents(dirname(__FILE__) . '/README.md');
    if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
      return '<pre>' . $text . '</pre>';
    }

    // Use the Markdown filter to render the README.
    $filter_manager = \Drupal::service('plugin.manager.filter');
    $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
    $config = ['settings' => $settings];
    $filter = $filter_manager->createInstance('markdown', $config);
    return $filter->process($text, 'en');
  }
  
  return NULL;
}

/**
 * Implements hook_ENTITY_TYPE_build_defaults_alter() for flagging entities.
 */
function bookmarks_flagging_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {
  if ($entity->getEntityTypeId() == 'flagging' && $entity->bundle() == 'bookmark') {
    // Flagging entity does not have a correct rendering, especially our `bookmark`
    // flag because it points to a `path_alias` entity which does not have correct
    // rendering either. So, we use a custom #pre_render callback to build content.
    $build['#pre_render'][] = [\Drupal::service('bookmarks.manager'), 'build'];
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function bookmarks_preprocess_views_view(&$variables) {
  $view = $variables['view'] ?? NULL;

  if ($view->id() == 'bookmarks') {
    // Remove ugly status message.
    $messenger = \Drupal::messenger();
    $messages = $messenger->deleteByType(MessengerInterface::TYPE_STATUS);
    if (!empty($messages)) {
      $messenger->addStatus('Bookmarks saved.');
    }
  }
}
