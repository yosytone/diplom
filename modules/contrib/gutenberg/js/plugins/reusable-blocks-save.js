/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

(function (wp, Drupal, lodash) {
  var some = lodash.some;
  var components = wp.components,
      element = wp.element,
      data = wp.data,
      editPost = wp.editPost,
      i18n = wp.i18n,
      plugins = wp.plugins;
  var useSelect = data.useSelect,
      useDispatch = data.useDispatch;
  var registerPlugin = plugins.registerPlugin;
  var PluginSidebar = editPost.PluginSidebar;
  var BaseControl = components.BaseControl,
      Button = components.Button,
      CheckboxControl = components.CheckboxControl,
      PanelBody = components.PanelBody,
      PanelRow = components.PanelRow;
  var Fragment = element.Fragment,
      useState = element.useState,
      useEffect = element.useEffect;
  var __ = i18n.__;


  var Sidebar = function Sidebar() {
    var dirtyEntityRecords = useSelect(function (select) {
      return select('core').__experimentalGetDirtyEntityRecords();
    }).filter(function (item) {
      return item.name === 'wp_block';
    });

    var _useDispatch = useDispatch('core/notices'),
        createNotice = _useDispatch.createNotice;

    var _useDispatch2 = useDispatch('core'),
        saveEditedEntityRecord = _useDispatch2.saveEditedEntityRecord;

    var _useDispatch3 = useDispatch('drupal'),
        setEntitiesToSave = _useDispatch3.setEntitiesToSave;

    var _useState = useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        unselectedEntities = _useState2[0],
        _setUnselectedEntities = _useState2[1];

    var setUnselectedEntities = function setUnselectedEntities(_ref, checked) {
      var kind = _ref.kind,
          name = _ref.name,
          key = _ref.key,
          property = _ref.property;

      if (checked) {
        _setUnselectedEntities(unselectedEntities.filter(function (elt) {
          return elt.kind !== kind || elt.name !== name || elt.key !== key || elt.property !== property;
        }));
      } else {
        _setUnselectedEntities([].concat(_toConsumableArray(unselectedEntities), [{ kind: kind, name: name, key: key, property: property }]));
      }
    };

    function getEntitiesToSave() {
      return dirtyEntityRecords.filter(function (_ref2) {
        var kind = _ref2.kind,
            name = _ref2.name,
            key = _ref2.key,
            property = _ref2.property;

        return !some(unselectedEntities, function (elt) {
          return elt.kind === kind && elt.name === name && elt.key === key && elt.property === property;
        });
      });
    }

    function saveItems() {
      var entitiesToSave = getEntitiesToSave();

      entitiesToSave.forEach(function (_ref3) {
        var kind = _ref3.kind,
            name = _ref3.name,
            key = _ref3.key,
            property = _ref3.property;

        saveEditedEntityRecord(kind, name, key, property);
      });

      createNotice('success', __('Reusable blocks saved!'), {
        type: 'snackbar'
      });
    }

    useEffect(function () {
      setEntitiesToSave(getEntitiesToSave());
    });

    return React.createElement(
      Fragment,
      null,
      dirtyEntityRecords.length > 0 && React.createElement(
        PluginSidebar,
        {
          name: 'state',
          title: 'Reusable Blocks',
          icon: 'block-default'
        },
        React.createElement(
          PanelBody,
          null,
          React.createElement(
            BaseControl,
            { help: __('Saving reusable blocks will affect other places where they are being used. You can de-select to not save.') },
            React.createElement(
              BaseControl.VisualLabel,
              null,
              __('The selected reusable blocks will be saved when saving the content. Press "Save now" button to save immediately.')
            )
          ),
          dirtyEntityRecords.map(function (item) {
            return React.createElement(
              PanelRow,
              null,
              React.createElement(CheckboxControl, {
                key: item.key,
                label: item.title,
                checked: !some(unselectedEntities, function (elt) {
                  return elt.kind === item.kind && elt.name === item.name && elt.key === item.key && elt.property === item.property;
                }),
                onChange: function onChange(checked) {
                  return setUnselectedEntities(item, checked);
                }
              })
            );
          }),
          React.createElement(
            PanelRow,
            null,
            React.createElement(
              Button,
              {
                isPrimary: true,
                onClick: function onClick() {
                  return saveItems();
                }
              },
              __('Save now')
            )
          )
        )
      )
    );
  };

  registerPlugin('reusable-blocks-save', {
    render: function render() {
      return React.createElement(Sidebar, null);
    }
  });
})(wp, Drupal, lodash);